This program implements the naive bayes and TAN algorithm. It will be written in java for now.
There will be a command line parser where the format of the command is

java bayes <train-set-file> <test-set-file> <n|t>

train-set-file is the training set file.
test-set-file is the testing set file.
Both have an ARFF file format.
This basically means it's in this format:
The file begins with lines starting with % announcing the data's source.
These lines our scanner should ignore.
After %s, there are @relation.
Ignore that as well.
Finally there are @attributes which are random variables and the values they can realize to.
The last @attributes will be named class and that is the variable we are testing for.
If the file doesn't match these formats, we should throw an InvalidFileFormatException.

The last parameter is either n or t telling us whether to use naive bayes rule or TAN.
We should do error checking on the command.

Naive Bayes:
We will create a naive bayes calculation object. This object will create a probability distribution hash
table (hashtable of hashtables). We will need a method to increment a cell given an attribute, 
and calculate probilities for each cell. Each cell is a nX2 hash table with {realization value: probability}.

We will also need a constructor that given a file and a scanner will
create the naive bayes calculation object - this should handle overfitting.

Next is the naive bayes output object. It is given a file, a scanner, and an outputfilename and should output each
prediction probability.
The first lines of the file should entail the attribute name + the parent of that attribute.
If the parent is null, don't create that line.
Every line after that should have <predicted class> <actual class> <probability>
The final line will be how many examples were actually correct.

Should have a constructor and only three methods:
calculateProbability, getLine, writeLine.
